/* Generated By:JJTree&JavaCC: Do not edit this line. SQLParser.java */
package sqlParser;
import executeSQL.*;

import java.io.BufferedReader;
import java.io.InputStream;
import java.util.ArrayList;
public class SQLParser/*@bgen(jjtree)*/implements SQLParserTreeConstants, SQLParserConstants {/*@bgen(jjtree)*/
    protected JJTSQLParserState jjtree = new JJTSQLParserState();
    static int choose=0;//存储要执行的SQL操作选项
    static public CreSQL creSql = new CreSQL();//声明创建类
    static public DropSQL dropSql = new DropSQL();//声明删除表类
    static public InsSQL insSql  = new InsSQL();//声明插入类
    static public DelSQL delSql = new DelSQL();//声明删除类
    static public SelSQL selSql = new SelSQL();//声明查询类
    static public UpdSQL updSql = new UpdSQL();//声明更新类
    public static void ExecuteSQL(InputStream is){
        System.out.println("欢迎进入数据库管理系统");
        SQLParser parser = new SQLParser(is);
        try{
            SimpleNode n = parser.Start();
            n.dump("");
            System.out.println("Yes");
            switch (choose){
                //执行select操作
                case 1:
                    System.out.println(selSql.selList);
                    System.out.println(selSql.fromList);
                    selSql.ExecuteSelSQL();
                    break;
                //执行create操作
                case 2:
                    System.out.println(creSql.tabName);
                    System.out.println(creSql.colList);
                    System.out.println(creSql.primaryList);
                    System.out.println(creSql.foreignList);
                    creSql.ExecuteCreSQL();//执行create操作
                    break;
                //执行drop操作
                case 3:
                    dropSql.ExecuteDropSQL();//执行drop操作
                    System.out.println(insSql.tabName);
                    System.out.println(insSql.inList);
                    System.out.println(insSql.vList);
                    break;
                //执行delete操作
                case 4:
                    delSql.ExecuteDelSQL();
                    break;
                //执行insert操作
                case 5:
                    insSql.ExecuteInsSQL();//执行插入insert操作
                    System.out.println(insSql.inList);
                    System.out.println(insSql.vList);
                    break;
                //执行update操作
                case 6:
                    System.out.println(updSql.tabName);
                    System.out.println(updSql.upList);
                    System.out.println(updSql.conditionList);
                    updSql.ExecuteUpdSQL();//执行修改update操作
                    break;
                default:break;
            }
        }
        catch(Exception e)
        {
            System.out.println("Oops");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    /* 语法解析*/
    final public SimpleNode Start() throws ParseException {
        /*@bgen(jjtree) Start */
        SimpleNode jjtn000 = new SimpleNode(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Expression();
            jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return jjtn000;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void Expression() throws ParseException {
        /*@bgen(jjtree) Expression */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SELECT:
                    choose=1;
                    Query();
                    break;
                case CREATE:
                    choose=2;
                    CreT();
                    break;
                case DROP:
                    choose=3;
                    DropT();
                    break;
                case DELETE:
                    choose=4;
                    DelT();
                    break;
                case INSERT:
                    choose=5;
                    InsT();
                    break;
                case UPDATE:
                    choose=6;
                    updT();
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /*定义查询select语句*/
    final public void Query() throws ParseException {
        /*@bgen(jjtree) Query */
        SimpleNode jjtn000 = new SimpleNode(JJTQUERY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            SFW();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case ORDER:
                    jj_consume_token(ORDER);
                    jj_consume_token(BY);
                    Attribute();
                    selSql.setOrder_attribute(token.image);
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SFW() throws ParseException {
        /*@bgen(jjtree) SFW */
        SimpleNode jjtn000 = new SimpleNode(JJTSFW);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(SELECT);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case DISTINCT:
                    jj_consume_token(DISTINCT);
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    ;
            }
            SelList();
            jj_consume_token(FROM);
            ArrayList Flist = new ArrayList();
            Flist = FromList();
            selSql.fromList = Flist;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case WHERE:
                    jj_consume_token(WHERE);
                    ArrayList Clist = new ArrayList();
                    Clist = Condition();
                    selSql.conditionList =Clist;
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SelList() throws ParseException {
        /*@bgen(jjtree) SelList */
        SimpleNode jjtn000 = new SimpleNode(JJTSELLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Attribute();
            selSql.selList.add(token.image);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case POINT:
                    jj_consume_token(POINT);
                    Attribute();
                    String string = selSql.selList.get(0)+"."+token.image;
                    selSql.selList.set(0,string);
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                    label_1:
                    while (true) {
                        jj_consume_token(COMMA);
                        Attribute();
                        selSql.selList.add(token.image);
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case POINT:
                                jj_consume_token(POINT);
                                Attribute();
                                int len = selSql.selList.size();
                                String str = selSql.selList.get(len-1)+"."+token.image;
                                selSql.selList.set(len-1,str);
                                break;
                            default:
                                jj_la1[5] = jj_gen;
                                ;
                        }
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case COMMA:
                                ;
                                break;
                            default:
                                jj_la1[6] = jj_gen;
                                break label_1;
                        }
                    }
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public ArrayList FromList() throws ParseException {
        /*@bgen(jjtree) FromList */
        SimpleNode jjtn000 = new SimpleNode(JJTFROMLIST);
        boolean jjtc000 = true;
        ArrayList list = new ArrayList();
        jjtree.openNodeScope(jjtn000);
        try {
            Relation();
            list.add(token.image);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                    label_2:
                    while (true) {
                        jj_consume_token(COMMA);
                        Relation();
                        list.add(token.image);
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case COMMA:
                                ;
                                break;
                            default:
                                jj_la1[8] = jj_gen;
                                break label_2;
                        }
                    }
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        return list;
    }

    /*定义查询条件*/
    final public ArrayList Condition() throws ParseException {
        /*@bgen(jjtree) Condition */
        SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
        boolean jjtc000 = true;
        ArrayList list = new ArrayList();
        jjtree.openNodeScope(jjtn000);
        try {
            Attribute();
            list.add(token.image);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case POINT:
                    jj_consume_token(POINT);
                    Attribute();
                    String str = list.get(0).toString()+"."+token.image;
                    list.set(0,str);
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case EQUAL:
                    jj_consume_token(EQUAL);
                    list.add("=");
                    break;
                case GREATER:
                    jj_consume_token(GREATER);
                    list.add(">");
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case EQUAL:
                            jj_consume_token(EQUAL);
                            list.set(1,">=");
                            break;
                        default:
                            jj_la1[11] = jj_gen;
                            ;
                    }
                    break;
                case LESS:
                    jj_consume_token(LESS);
                    list.add("<");
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case EQUAL:
                        case GREATER:
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                case GREATER:
                                    jj_consume_token(GREATER);
                                    list.set(1,"<>");
                                    break;
                                case EQUAL:
                                    jj_consume_token(EQUAL);
                                    list.set(1,"<=");
                                    break;
                                default:
                                    jj_la1[12] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        default:
                            jj_la1[13] = jj_gen;
                            ;
                    }
                    break;
                case LIKE:
                    jj_consume_token(LIKE);
                    list.add(token.image);
                    break;
                default:
                    jj_la1[14] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case IDENTIFIER:
                    Attribute();
                    list.add(token.image);
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case POINT:
                            jj_consume_token(POINT);
                            Attribute();
                            String str1=list.get(2).toString()+"."+token.image;
                            list.set(2,str1);
                            break;
                        default:
                            jj_la1[15] = jj_gen;
                            ;
                    }
                    break;
                case LQUOTATION:
                    String p = Pattern();
                    list.add(p);
                    break;
                case INTEGER_LITERAL:
                    NUMBER();
                    int number = Integer.parseInt(token.image);
                    list.add(number);
                    break;
                default:
                    jj_la1[16] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case AND:
                case OR:
                    label_3:
                    while (true) {
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case AND:
                                jj_consume_token(AND);
                                list.add(token.image);
                                break;
                            case OR:
                                jj_consume_token(OR);
                                list.add(token.image);
                                break;
                            default:
                                jj_la1[17] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        Attribute();
                        list.add(token.image);
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case POINT:
                                jj_consume_token(POINT);
                                Attribute();
                                int l = list.size();
                                String s = list.get(l-1)+"."+token.image;
                                list.set(l-1,s);
                                break;
                            default:
                                jj_la1[18] = jj_gen;
                                ;
                        }
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case EQUAL:
                                jj_consume_token(EQUAL);
                                list.add("=");
                                break;
                            case GREATER:
                                jj_consume_token(GREATER);
                                list.add(">");
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case EQUAL:
                                        jj_consume_token(EQUAL);
                                        list.add(">=");
                                        break;
                                    default:
                                        jj_la1[19] = jj_gen;
                                        ;
                                }
                                break;
                            case LESS:
                                jj_consume_token(LESS);
                                list.add("<");
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case EQUAL:
                                    case GREATER:
                                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                            case GREATER:
                                                jj_consume_token(GREATER);
                                                int l = list.size();
                                                list.set(l-1,"<>");
                                                break;
                                            case EQUAL:
                                                jj_consume_token(EQUAL);
                                                int len = list.size();
                                                list.set(len-1,"<=");
                                                break;
                                            default:
                                                jj_la1[20] = jj_gen;
                                                jj_consume_token(-1);
                                                throw new ParseException();
                                        }
                                        break;
                                    default:
                                        jj_la1[21] = jj_gen;
                                        ;
                                }
                                break;
                            case LIKE:
                                jj_consume_token(LIKE);
                                list.add(token.image);
                                break;
                            default:
                                jj_la1[22] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case IDENTIFIER:
                                Attribute();
                                list.add(token.image);
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case POINT:
                                        jj_consume_token(POINT);
                                        Attribute();
                                        int l = list.size();
                                        String s = list.get(l-1)+"."+token.image;
                                        list.set(l-1,s);
                                        break;
                                    default:
                                        jj_la1[23] = jj_gen;
                                        ;
                                }
                                break;
                            case LQUOTATION:
                                String s = Pattern();
                                list.add(s);
                                break;
                            case INTEGER_LITERAL:
                                NUMBER();
                                int number = Integer.parseInt(token.image);
                                list.add(number);
                                break;
                            default:
                                jj_la1[24] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case AND:
                            case OR:
                                ;
                                break;
                            default:
                                jj_la1[25] = jj_gen;
                                break label_3;
                        }
                    }
                    break;
                default:
                    jj_la1[26] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        return list;
    }

    final public void Tuple() throws ParseException {
        /*@bgen(jjtree) Tuple */
        SimpleNode jjtn000 = new SimpleNode(JJTTUPLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Attribute();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /*定义创建create语句*/
    final public void CreT() throws ParseException {
        /*@bgen(jjtree) CreT */
        SimpleNode jjtn000 = new SimpleNode(JJTCRET);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(CREATE);
            jj_consume_token(TABLE);
            Relation();
            creSql.setTabName(token.image);//获取需要创建的表名
            jj_consume_token(LEFTPARENTHESES);
            ColList();
            Tab_constraint();
            jj_consume_token(RIGHTPARENTHESES);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ColList() throws ParseException {
        /*@bgen(jjtree) ColList */
        SimpleNode jjtn000 = new SimpleNode(JJTCOLLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Attribute();
            creSql.colList.add(token.image);//获取属性
            String typeStr=Type();
            creSql.colList.add(typeStr);//获取属性的数据类型
            jj_consume_token(COMMA);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case IDENTIFIER:
                    label_4:
                    while (true) {
                        Attribute();
                        creSql.colList.add(token.image);//获取属性
                        String typeStr1=Type();
                        creSql.colList.add(typeStr1);//获取属性的数据类型
                        jj_consume_token(COMMA);
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case IDENTIFIER:
                                ;
                                break;
                            default:
                                jj_la1[27] = jj_gen;
                                break label_4;
                        }
                    }
                    break;
                default:
                    jj_la1[28] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public String Type() throws ParseException {
        /*@bgen(jjtree) Type */
        SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
        boolean jjtc000 = true;
        String typeStr = null;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case INT:
                    jj_consume_token(INT);
                    typeStr=token.image;
                    break;
                case DATE:
                    jj_consume_token(DATE);
                    typeStr=token.image;
                    break;
                case CHAR:
                    jj_consume_token(CHAR);
                    jj_consume_token(LEFTPARENTHESES);
                    jj_consume_token(INTEGER_LITERAL);
                    typeStr="char"+token.image;
                    jj_consume_token(RIGHTPARENTHESES);
                    break;
                default:
                    jj_la1[29] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        return typeStr;
    }

    /*表级约束条件*/
    final public void Tab_constraint() throws ParseException {
        /*@bgen(jjtree) Tab_constraint */
        SimpleNode jjtn000 = new SimpleNode(JJTTAB_CONSTRAINT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(PRIMARY);
            jj_consume_token(KEY);
            jj_consume_token(LEFTPARENTHESES);
            Attribute();
            creSql.primaryList.add(token.image);//获取主键
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                    label_5:
                    while (true) {
                        jj_consume_token(COMMA);
                        Attribute();
                        creSql.primaryList.add(token.image);//获取主键
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case COMMA:
                                ;
                                break;
                            default:
                                jj_la1[30] = jj_gen;
                                break label_5;
                        }
                    }
                    break;
                default:
                    jj_la1[31] = jj_gen;
                    ;
            }
            jj_consume_token(RIGHTPARENTHESES);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                    label_6:
                    while (true) {
                        jj_consume_token(COMMA);
                        jj_consume_token(FOREIGN);
                        jj_consume_token(KEY);
                        jj_consume_token(LEFTPARENTHESES);
                        Attribute();
                        jj_consume_token(RIGHTPARENTHESES);
                        jj_consume_token(REFERENCES);
                        Attribute();
                        jj_consume_token(LEFTPARENTHESES);
                        Attribute();
                        jj_consume_token(RIGHTPARENTHESES);
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case COMMA:
                                ;
                                break;
                            default:
                                jj_la1[32] = jj_gen;
                                break label_6;
                        }
                    }
                    break;
                default:
                    jj_la1[33] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /*定义删除drop、delete语句*/
    final public void DropT() throws ParseException {
        /*@bgen(jjtree) DropT */
        SimpleNode jjtn000 = new SimpleNode(JJTDROPT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(DROP);
            jj_consume_token(TABLE);
            Relation();
            dropSql.setTabName(token.image);//存储要drop的表名
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case RESTRICT:
                case CASCADE:
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case RESTRICT:
                            jj_consume_token(RESTRICT);
                            dropSql.setDropCond(token.image);//存储drop的条件
                            break;
                        case CASCADE:
                            jj_consume_token(CASCADE);
                            dropSql.setDropCond(token.image);//存储drop的条件
                            break;
                        default:
                            jj_la1[34] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[35] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void DelT() throws ParseException {
        /*@bgen(jjtree) DelT */
        SimpleNode jjtn000 = new SimpleNode(JJTDELT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(DELETE);
            jj_consume_token(FROM);
            ArrayList Flist = new ArrayList();
            Flist = FromList();
            delSql.fromList = Flist;
            jj_consume_token(WHERE);
            ArrayList Clist = new ArrayList();
            Clist = Condition();
            delSql.conditionList = Clist;
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /*定义插入insert语句*/
    final public void InsT() throws ParseException {
        /*@bgen(jjtree) InsT */
        SimpleNode jjtn000 = new SimpleNode(JJTINST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(INSERT);
            jj_consume_token(INTO);
            Relation();
            insSql.setTabName(token.image);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case LEFTPARENTHESES:
                    jj_consume_token(LEFTPARENTHESES);
                    InList();
                    jj_consume_token(RIGHTPARENTHESES);
                    break;
                default:
                    jj_la1[36] = jj_gen;
                    ;
            }
            jj_consume_token(VALUES);
            jj_consume_token(LEFTPARENTHESES);
            VList();
            jj_consume_token(RIGHTPARENTHESES);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void InList() throws ParseException {
        /*@bgen(jjtree) InList */
        SimpleNode jjtn000 = new SimpleNode(JJTINLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Attribute();
            insSql.inList.add(token.image);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                    label_7:
                    while (true) {
                        jj_consume_token(COMMA);
                        Attribute();
                        insSql.inList.add(token.image);
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case COMMA:
                                ;
                                break;
                            default:
                                jj_la1[37] = jj_gen;
                                break label_7;
                        }
                    }
                    break;
                default:
                    jj_la1[38] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void VList() throws ParseException {
        /*@bgen(jjtree) VList */
        SimpleNode jjtn000 = new SimpleNode(JJTVLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case INTEGER_LITERAL:
                    jj_consume_token(INTEGER_LITERAL);
                    int n = Integer.parseInt(token.image);
                    insSql.vList.add(n);
                    break;
                case LQUOTATION:
                    String str=Pattern();
                    insSql.vList.add(str);
                    break;
                default:
                    jj_la1[39] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                    label_8:
                    while (true) {
                        jj_consume_token(COMMA);
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case INTEGER_LITERAL:
                                NUMBER();
                                insSql.vList.add(token.image);
                                break;
                            case LQUOTATION:
                                String str = Pattern();
                                insSql.vList.add(str);
                                break;
                            default:
                                jj_la1[40] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case COMMA:
                                ;
                                break;
                            default:
                                jj_la1[41] = jj_gen;
                                break label_8;
                        }
                    }
                    break;
                default:
                    jj_la1[42] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /*定义更新update语句*/
    final public void updT() throws ParseException {
        /*@bgen(jjtree) updT */
        SimpleNode jjtn000 = new SimpleNode(JJTUPDT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(UPDATE);
            Relation();
            updSql.setTabName(token.image);
            jj_consume_token(SET);
            UpList();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case WHERE:
                    jj_consume_token(WHERE);
                    ArrayList cList = new ArrayList();
                    cList = Condition();
                    updSql.conditionList =cList;
                    break;
                default:
                    jj_la1[43] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void UpList() throws ParseException {
        /*@bgen(jjtree) UpList */
        SimpleNode jjtn000 = new SimpleNode(JJTUPLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Attribute();
            updSql.upList.add(token.image);
            jj_consume_token(EQUAL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case INTEGER_LITERAL:
                    NUMBER();
                    int number = Integer.parseInt(token.image);
                    updSql.upList.add(number);
                    break;
                case LQUOTATION:
                    String str = Pattern();
                    updSql.upList.add(str);
                    break;
                default:
                    jj_la1[44] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                    label_9:
                    while (true) {
                        jj_consume_token(COMMA);
                        Attribute();
                        updSql.upList.add(token.image);
                        jj_consume_token(EQUAL);
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case INTEGER_LITERAL:
                                NUMBER();
                                int number1 = Integer.parseInt(token.image);
                                updSql.upList.add(number1);
                                break;
                            case LQUOTATION:
                                String str1 = Pattern();
                                updSql.upList.add(str1);
                                break;
                            default:
                                jj_la1[45] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case COMMA:
                                ;
                                break;
                            default:
                                jj_la1[46] = jj_gen;
                                break label_9;
                        }
                    }
                    break;
                default:
                    jj_la1[47] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /*定义标识符*/
    final public void Attribute() throws ParseException {
        /*@bgen(jjtree) Attribute */
        SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            IDENTIFIER();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Relation() throws ParseException {
        /*@bgen(jjtree) Relation */
        SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            IDENTIFIER();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public String Pattern() throws ParseException {
        /*@bgen(jjtree) Pattern */
        SimpleNode jjtn000 = new SimpleNode(JJTPATTERN);
        boolean jjtc000 = true;
        String str = null;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LQUOTATION);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case IDENTIFIER:
                    IDENTIFIER();
                    str = token.image;
                    break;
                case INTEGER_LITERAL:
                    NUMBER();
                    str = token.image;
                    break;
                default:
                    jj_la1[48] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(LQUOTATION);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        return str;
    }

    final public void NUMBER() throws ParseException {
        /*@bgen(jjtree) NUMBER */
        SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(INTEGER_LITERAL);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void IDENTIFIER() throws ParseException {
        /*@bgen(jjtree) IDENTIFIER */
        SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(IDENTIFIER);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /** Generated Token Manager. */
    public SQLParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[49];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }
    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] {0x8008e020,0x800000,0x200000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0xc000000,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0xc000000,0xc000000,0x0,0x0,0x70000000,0x0,0x0,0x0,0x0,0xc00,0xc00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,};
    }
    private static void jj_la1_init_1() {
        jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x800,0x800,0x2,0x2,0x2,0x2,0x800,0x40,0x1040,0x1040,0x3040,0x800,0x58000,0x0,0x800,0x40,0x1040,0x1040,0x3040,0x800,0x58000,0x0,0x0,0x40000,0x40000,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x10,0x2,0x2,0x18000,0x18000,0x2,0x2,0x0,0x18000,0x18000,0x2,0x2,0x50000,};
    }

    /** Constructor with InputStream. */
    public SQLParser(java.io.InputStream stream) {
        this(stream, null);
    }
    /** Constructor with InputStream and supplied encoding */
    public SQLParser(java.io.InputStream stream, String encoding) {
        try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source = new SQLParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }
    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    }

    /** Constructor. */
    public SQLParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new SQLParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    }

    /** Constructor with generated Token Manager. */
    public SQLParser(SQLParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(SQLParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }


    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt=token.next) == null)
            return (jj_ntk = (token.next=token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[52];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 49; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1<<j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1<<j)) != 0) {
                        la1tokens[32+j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 52; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

}
